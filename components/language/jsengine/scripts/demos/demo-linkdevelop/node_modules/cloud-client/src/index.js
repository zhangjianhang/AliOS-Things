//cloudClient 为设备通过 MQTT 协议，直接连接 Link Developer 平台的上云模块，包括设备的属性上报，事件触发，服务调用

var cloudClient = {};
var connected = false;
var id = 0;
var prefix = null;
var idcbs = {};

//启动 cloudClient 模块

// config 为设备三元组信息


// cb 为注册的回调函数，启动 cloudClient 完成时调用，包括成功或者失败

cloudClient.start = function (config, cb) {
  if (connected) {
    cb(null, "success");
    return;
  }

  //调用Native MQTT module
  MQTT.start(config, function (error) {
    if (error) {
      connected = false;
      console.log("mqtt Auth fail");
      cb("mqtt Auth fail");
    } else {
      connected = true;
      prefix = "/sys/" + config.productKey + "/" + config.deviceName + "/";
      MQTT.subscribe(prefix + "thing/event/property/post_reply", function (
        msg,
        topic
      ) {
        //       console.log(topic);
      });
      cb(null, "success");
    }
  });
};

//onPropertySet 云端设置设备端的属性
// cb 为注册的回调函数，云端设置设备端的属性时在本地执行
cloudClient.onPropertySet = function (cb) {
  MQTT.subscribe(prefix + "thing/service/property/set", function (msg, topic) {
    msg && cb && cb(msg);
  });
};

cloudClient.onEvent = function (cb) { };
cloudClient.onService = function (cb) { };

//postProperty 设备上报属性到云端，应用程序可以通过调用该函数来通知本地的设备属性已经更新；
//cb为注册的回调函数，上报成功或者失败时执行
cloudClient.postProperty = function (params, cb) {
  if (!connected) {
    cb("MQTT not connected");
    return;
  }

  MQTT.publish(
    prefix + "thing/event/property/post",
    JSON.stringify({
      id: id++,
      version: "1.0",
      method: "thing.event.property.post",
      params: params
    })
  );
};

//postEvent 设备上报事件到云端，应用程序可以通过调用该函数来通知本地的设备已经触发了的事件；
// cb 为注册的回调函数，上报成功或者失败时执行
cloudClient.postEvent = function (eventName, params, cb) {
  if (!connected) {
    cb("MQTT not connected");
    return;
  }

  MQTT.publish(
    prefix + "thing/event/" + eventName + "/post",
    JSON.stringify({
      id: id++,
      version: "1.0",
      method: "thing.event." + eventName + ".post",
      params: params
    })
  );
};

//replySyncService 同步响应云端调用的服务
cloudClient.replySyncService = function (msgid, data, cb) {
  if (!connected) {
    cb("MQTT not connected");
    return;
  }

  MQTT.publish(
    prefix + "rrpc/response/" + msgid,
    JSON.stringify({
      id: id++,
      code: 200,
      data: data || {}
    })
  );
};

//replyAsyncService 异步响应云端调用的服务
cloudClient.replyAsyncService = function (serviceName, data, cb) {
  if (!connected) {
    cb("MQTT not connected");
    return;
  }

  MQTT.publish(
    prefix + "thing/service/" + serviceName + "_reply",
    JSON.stringify({
      id: id++,
      code: 200,
      data: data || {}
    })
  );
};

module.exports = cloudClient;
